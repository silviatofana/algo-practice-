import java.io.*;
import java.util.*;
/*
input:  arr = [1, 4, 5, 2, 3, 7, 8, 6, 10, 9], k = 2
1, 2,3,4,5,6,7,8,9,10
8,10, 9
1,2,3,4,5,6,7, 8,9,10

output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

function insertionSort(arr):
    for i from 1 to arr.length-1:
        x = arr[i]
        j = i-1

        while (j >= 0 AND arr[j] > x):
            arr[j+1] = arr[j]
            j--
        arr[j+1] = x

    return arr
    
    
    
    
    function sortKMessedArray(arr, k):
    n = arr.length

    # create an empty min-heap
    h = new MinHeap()

    # build the min-heap from the first k+1 elements of arr
    h.buildHeap(arr[0,...,k])

    for i from k+1 to n-1:
        # extract the top element from the min-heap and
        # assign it to the next available array index
        arr[i-(k+1)] = h.extractMin()

        # push the next array element into the min-heap
        h.insert(arr[i])

    # extract all remaining elements from the min-heap
    # and assign them to the next available array index
    for i from 0 to k:
        arr[n-k-1 + i] = h.extractMin()

    return arr

*/
class Solution {
/*
  static int[] sortKMessedArray(int[] arr, int k) {
    // your code goes here
    int n = arr.length;
    PriorityQueue<Integer> pq = new PriorityQueue<>(3);
    for (int i = 0; i <=k; i++) {
      pq.add(arr[i]);
    }
    for (int i = k+1; i< arr.length; i++) {
        arr[i-k-1] = pq.poll();
        pq.add(arr[i]);
    }
    for (int i = 0; i <= k; i++) {
      arr[n-k-1 +i] = pq.poll();
    }
      
    
    return arr;
  }
  */
  
  static int[] sortKMessedArray(int[] arr, int k) {
    // your code goes here
    int n = arr.length;
    PriorityQueue<Integer> pq = new PriorityQueue<>(3);
    for (int i = 0; i <=k; i++) {
      pq.add(arr[i]);
    }
    for (int i = 0; i< arr.length; i++) {
        arr[i] = pq.poll();
        if (k+i+1 < arr.length)
          pq.add(arr[k+i+1]);
    }
   /* for (int i = 0; i <= k; i++) {
      arr[n-k-1 +i] = pq.poll();
    }*/
      
    
    return arr;
  }

  public static void main(String[] args) {

  }

}